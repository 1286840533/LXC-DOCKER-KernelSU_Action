name: 高端机仅内核编译 阿菌未霜clang18 v6
on:
  workflow_dispatch:

jobs:
  build:
    name: 
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 环境变量配置
      run: |
        cat config.env | grep KERNEL_SOURCE= >> $GITHUB_ENV
        cat config.env | grep KERNEL_SOURCE_BRANCH= >> $GITHUB_ENV
        cat config.env | grep KERNEL_CONFIG= >> $GITHUB_ENV
        cat config.env | grep KERNEL_ZIP_NAME= >> $GITHUB_ENV
        cat config.env | grep LLVM_CONFIG= >> $GITHUB_ENV
        cat config.env | grep KERNEL_IMAGE_NAME= >> $GITHUB_ENV
        cat config.env | grep NEED_DTBO= >> $GITHUB_ENV
        cat config.env | grep SWITCH_PYTHON= >> $GITHUB_ENV

    - name: 构建编译内核环境
      run: |
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        sudo apt-get update -y 
        sudo apt install gcc-aarch64-linux-gnu -y
        sudo apt install gcc-arm-linux-gnueabi -y
        sudo apt install binutils make python3 libssl-dev build-essential bc  bison flex unzip libssl-dev ca-certificates xz-utils mkbootimg cpio device-tree-compiler git git-lfs -y
        
    - name: 切换python2.7
      if: env.SWITCH_PYTHON == 'true'
      run: |
       sudo rm -f /usr/bin/python
       sudo ln -s /usr/bin/python2.7 /usr/bin/python
                     
    - name: 下载 阿菌未霜 clang 编译器
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-mandi-sa
        git clone https://codeberg.org/Mandi-Sa/clang --depth=1 -b amd64-kernel-arm clang-mandi-sa
                       
    - name: 下载内核源码
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1
                                
    - name: 设置ccache缓存
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-mido-kernel
        max-size: 2G

    - name: 开始编译内核
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-mandi-sa/bin:$PATH
        export ARCH=arm64
        export SUBARCH=arm64
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 O=out ${{ env.KERNEL_CONFIG }} CC="ccache clang" 
        if [ ${{env.LLVM_CONFIG}}=y ]; then
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1 O=out CC="ccache clang" -j$(nproc --all)       
        else
        make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- O=out CC="ccache clang" -j$(nproc --all)         
        fi
                
    - name: 准备打包内核
      run: |       
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=1;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh        
        cp android-kernel/out/arch/arm64/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
        if [ ${{ env.NEED_DTBO }} = true ]; then
            echo "NEED=true" >> $GITHUB_ENV
            if [ -f android-kernel/out/arch/arm64/boot/dtbo.img ]; then
                echo "DTBO_EXIST=true" >> $GITHUB_ENV           
            fi
        fi        
        if [ ${{ env.DTBO_EXIST }} = true ]; then
            cp android-kernel/out/arch/arm64/boot/dtbo.img AnyKernel3/
        fi  
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
        rm -rf AnyKernel3/ramdisk AnyKernel3/modules AnyKernel3/patch
        
    - name: 上传内核
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_ZIP_NAME }}
        path: kernel_workspace/AnyKernel3/*

    - name: 上传dtbo镜像
      if: env.DTBO_EXSIT == 'true' && env.NEED == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: dtbo-image
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/dtbo.img
          
